"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOauthHeaders = exports.refreshAccessToken = exports.fetchOauthTokens = exports.getBasicAuthHeaders = exports.defaultParam = void 0;
const base_64_1 = require("base-64");
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const debug_1 = __importDefault(require("debug"));
const typeHelpers_1 = require("./typeHelpers");
const debug = debug_1.default('tsdav:authHelper');
/**
 * Provide given params as default params to given function with optional params.
 *
 * suitable only for one param functions
 * params are shallow merged
 */
const defaultParam = (fn, params) => (...args) => {
    return fn(Object.assign(Object.assign({}, params), args[0]));
};
exports.defaultParam = defaultParam;
const getBasicAuthHeaders = (credentials) => {
    debug(`Basic auth token generated: ${base_64_1.encode(`${credentials.username}:${credentials.password}`)}`);
    return {
        authorization: `Basic ${base_64_1.encode(`${credentials.username}:${credentials.password}`)}`,
    };
};
exports.getBasicAuthHeaders = getBasicAuthHeaders;
const fetchOauthTokens = (credentials) => __awaiter(void 0, void 0, void 0, function* () {
    const requireFields = [
        'authorizationCode',
        'redirectUrl',
        'clientId',
        'clientSecret',
        'tokenUrl',
    ];
    if (!typeHelpers_1.hasFields(credentials, requireFields)) {
        throw new Error(`Oauth credentials missing: ${typeHelpers_1.findMissingFieldNames(credentials, requireFields)}`);
    }
    const param = new URLSearchParams({
        grant_type: 'authorization_code',
        code: credentials.authorizationCode,
        redirect_uri: credentials.redirectUrl,
        client_id: credentials.clientId,
        client_secret: credentials.clientSecret,
    });
    debug(credentials.tokenUrl);
    debug(param.toString());
    const response = yield cross_fetch_1.default(credentials.tokenUrl, {
        method: 'POST',
        body: param.toString(),
        headers: {
            'content-length': `${param.toString().length}`,
            'content-type': 'application/x-www-form-urlencoded',
        },
    });
    if (response.ok) {
        const tokens = yield response.json();
        return tokens;
    }
    debug(`Fetch Oauth tokens failed: ${yield response.text()}`);
    return {};
});
exports.fetchOauthTokens = fetchOauthTokens;
const refreshAccessToken = (credentials) => __awaiter(void 0, void 0, void 0, function* () {
    const requireFields = [
        'refreshToken',
        'clientId',
        'clientSecret',
        'tokenUrl',
    ];
    if (!typeHelpers_1.hasFields(credentials, requireFields)) {
        throw new Error(`Oauth credentials missing: ${typeHelpers_1.findMissingFieldNames(credentials, requireFields)}`);
    }
    const param = new URLSearchParams({
        client_id: credentials.clientId,
        client_secret: credentials.clientSecret,
        refresh_token: credentials.refreshToken,
        grant_type: 'refresh_token',
    });
    const response = yield cross_fetch_1.default(credentials.tokenUrl, {
        method: 'POST',
        body: param.toString(),
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
    });
    if (response.ok) {
        const tokens = yield response.json();
        return tokens;
    }
    debug(`Refresh access token failed: ${yield response.text()}`);
    return {};
});
exports.refreshAccessToken = refreshAccessToken;
const getOauthHeaders = (credentials) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    debug('Fetching oauth headers');
    let tokens = {};
    if (!credentials.refreshToken) {
        // No refresh token, fetch new tokens
        tokens = yield exports.fetchOauthTokens(credentials);
    }
    else if ((credentials.refreshToken && !credentials.accessToken) ||
        Date.now() > ((_a = credentials.expiration) !== null && _a !== void 0 ? _a : 0)) {
        // have refresh token, but no accessToken, fetch access token only
        // or have both, but accessToken was expired
        tokens = yield exports.refreshAccessToken(credentials);
    }
    // now we should have valid access token
    debug(`Oauth tokens fetched: ${tokens.access_token}`);
    return {
        tokens,
        headers: {
            authorization: `Bearer ${tokens.access_token}`,
        },
    };
});
exports.getOauthHeaders = getOauthHeaders;
//# sourceMappingURL=authHelpers.js.map