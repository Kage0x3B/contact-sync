import { DAVNamespace } from '../consts';
import { DAVFilter, DAVProp } from '../types/DAVTypes';
import type { NoUndefinedField } from './typeHelpers';
export declare const urlEquals: (urlA?: string | undefined, urlB?: string | undefined) => boolean;
export declare const urlContains: (urlA?: string | undefined, urlB?: string | undefined) => boolean;
declare type ShallowMergeDupKeyArray<A, B> = {
    [key in keyof A | keyof B]: key extends keyof A & keyof B ? Array<A[key] | B[key]> : key extends keyof A ? A[key] : key extends keyof B ? B[key] : never;
};
export declare const mergeObjectDupKeyArray: <A, B>(objA: A, objB: B) => ShallowMergeDupKeyArray<A, B>;
export declare const getDAVAttribute: (nsArr: DAVNamespace[]) => {
    [key: string]: DAVNamespace;
};
export declare const formatProps: (props?: DAVProp[] | undefined) => {
    [key: string]: any;
} | undefined;
export declare const formatFilters: (filters?: DAVFilter[] | undefined) => {
    [key: string]: any;
} | undefined;
export declare const cleanupFalsy: <T = unknown>(obj: T) => NoUndefinedField<T>;
export {};
