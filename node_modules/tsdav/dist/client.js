"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DAVClient = exports.createDAVClient = void 0;
const account_1 = require("./account");
const addressBook_1 = require("./addressBook");
const calendar_1 = require("./calendar");
const collection_1 = require("./collection");
const request_1 = require("./request");
const authHelpers_1 = require("./util/authHelpers");
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
const createDAVClient = (params) => __awaiter(void 0, void 0, void 0, function* () {
    const { serverUrl, credentials, authMethod, defaultAccountType } = params;
    const authHeaders = 
    // eslint-disable-next-line no-nested-ternary
    authMethod === 'Basic'
        ? authHelpers_1.getBasicAuthHeaders(credentials)
        : authMethod === 'Oauth'
            ? (yield authHelpers_1.getOauthHeaders(credentials)).headers
            : {};
    const defaultAccount = defaultAccountType
        ? yield account_1.createAccount({
            account: { serverUrl, credentials, accountType: defaultAccountType },
            headers: authHeaders,
        })
        : undefined;
    const davRequest = (params0) => __awaiter(void 0, void 0, void 0, function* () {
        const { init } = params0, rest = __rest(params0, ["init"]);
        const { headers } = init, restInit = __rest(init, ["headers"]);
        return request_1.davRequest(Object.assign(Object.assign({}, rest), { init: Object.assign(Object.assign({}, restInit), { headers: Object.assign(Object.assign({}, authHeaders), headers) }) }));
    });
    const createObject = authHelpers_1.defaultParam(request_1.createObject, {
        url: serverUrl,
        headers: authHeaders,
    });
    const updateObject = authHelpers_1.defaultParam(request_1.updateObject, { headers: authHeaders, url: serverUrl });
    const deleteObject = authHelpers_1.defaultParam(request_1.deleteObject, { headers: authHeaders, url: serverUrl });
    const propfind = authHelpers_1.defaultParam(request_1.propfind, { headers: authHeaders });
    // account
    const createAccount = (params0) => __awaiter(void 0, void 0, void 0, function* () {
        const { account, headers, loadCollections, loadObjects } = params0;
        return account_1.createAccount({
            account: Object.assign({ serverUrl, credentials }, account),
            headers: Object.assign(Object.assign({}, authHeaders), headers),
            loadCollections,
            loadObjects,
        });
    });
    // collection
    const collectionQuery = authHelpers_1.defaultParam(collection_1.collectionQuery, { headers: authHeaders });
    const makeCollection = authHelpers_1.defaultParam(collection_1.makeCollection, { headers: authHeaders });
    const syncCollection = authHelpers_1.defaultParam(collection_1.syncCollection, { headers: authHeaders });
    const supportedReportSet = authHelpers_1.defaultParam(collection_1.supportedReportSet, {
        headers: authHeaders,
    });
    const isCollectionDirty = authHelpers_1.defaultParam(collection_1.isCollectionDirty, {
        headers: authHeaders,
    });
    const smartCollectionSync = authHelpers_1.defaultParam(collection_1.smartCollectionSync, {
        headers: authHeaders,
        account: defaultAccount,
    });
    // calendar
    const calendarQuery = authHelpers_1.defaultParam(calendar_1.calendarQuery, { headers: authHeaders });
    const calendarMultiGet = authHelpers_1.defaultParam(calendar_1.calendarMultiGet, { headers: authHeaders });
    const makeCalendar = authHelpers_1.defaultParam(calendar_1.makeCalendar, { headers: authHeaders });
    const fetchCalendars = authHelpers_1.defaultParam(calendar_1.fetchCalendars, {
        headers: authHeaders,
        account: defaultAccount,
    });
    const fetchCalendarObjects = authHelpers_1.defaultParam(calendar_1.fetchCalendarObjects, {
        headers: authHeaders,
    });
    const createCalendarObject = authHelpers_1.defaultParam(calendar_1.createCalendarObject, {
        headers: authHeaders,
    });
    const updateCalendarObject = authHelpers_1.defaultParam(calendar_1.updateCalendarObject, {
        headers: authHeaders,
    });
    const deleteCalendarObject = authHelpers_1.defaultParam(calendar_1.deleteCalendarObject, {
        headers: authHeaders,
    });
    const syncCalendars = authHelpers_1.defaultParam(calendar_1.syncCalendars, {
        account: defaultAccount,
        headers: authHeaders,
    });
    // addressBook
    const addressBookQuery = authHelpers_1.defaultParam(addressBook_1.addressBookQuery, { headers: authHeaders });
    const addressBookMultiGet = authHelpers_1.defaultParam(addressBook_1.addressBookMultiGet, { headers: authHeaders });
    const fetchAddressBooks = authHelpers_1.defaultParam(addressBook_1.fetchAddressBooks, {
        account: defaultAccount,
        headers: authHeaders,
    });
    const fetchVCards = authHelpers_1.defaultParam(addressBook_1.fetchVCards, { headers: authHeaders });
    const createVCard = authHelpers_1.defaultParam(addressBook_1.createVCard, { headers: authHeaders });
    const updateVCard = authHelpers_1.defaultParam(addressBook_1.updateVCard, { headers: authHeaders });
    const deleteVCard = authHelpers_1.defaultParam(addressBook_1.deleteVCard, { headers: authHeaders });
    return {
        davRequest,
        propfind,
        createAccount,
        createObject,
        updateObject,
        deleteObject,
        calendarQuery,
        addressBookQuery,
        collectionQuery,
        makeCollection,
        calendarMultiGet,
        makeCalendar,
        syncCollection,
        supportedReportSet,
        isCollectionDirty,
        smartCollectionSync,
        fetchCalendars,
        fetchCalendarObjects,
        createCalendarObject,
        updateCalendarObject,
        deleteCalendarObject,
        syncCalendars,
        fetchAddressBooks,
        addressBookMultiGet,
        fetchVCards,
        createVCard,
        updateVCard,
        deleteVCard,
    };
});
exports.createDAVClient = createDAVClient;
class DAVClient {
    constructor(params) {
        var _a, _b;
        this.serverUrl = params.serverUrl;
        this.credentials = params.credentials;
        this.authMethod = (_a = params.authMethod) !== null && _a !== void 0 ? _a : 'Basic';
        this.accountType = (_b = params.defaultAccountType) !== null && _b !== void 0 ? _b : 'caldav';
    }
    login() {
        return __awaiter(this, void 0, void 0, function* () {
            this.authHeaders =
                // eslint-disable-next-line no-nested-ternary
                this.authMethod === 'Basic'
                    ? authHelpers_1.getBasicAuthHeaders(this.credentials)
                    : this.authMethod === 'Oauth'
                        ? (yield authHelpers_1.getOauthHeaders(this.credentials)).headers
                        : {};
            this.account = this.accountType
                ? yield account_1.createAccount({
                    account: {
                        serverUrl: this.serverUrl,
                        credentials: this.credentials,
                        accountType: this.accountType,
                    },
                    headers: this.authHeaders,
                })
                : undefined;
        });
    }
    davRequest(params0) {
        return __awaiter(this, void 0, void 0, function* () {
            const { init } = params0, rest = __rest(params0, ["init"]);
            const { headers } = init, restInit = __rest(init, ["headers"]);
            return request_1.davRequest(Object.assign(Object.assign({}, rest), { init: Object.assign(Object.assign({}, restInit), { headers: Object.assign(Object.assign({}, this.authHeaders), headers) }) }));
        });
    }
    createObject(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return authHelpers_1.defaultParam(request_1.createObject, {
                url: this.serverUrl,
                headers: this.authHeaders,
            })(params[0]);
        });
    }
    updateObject(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return authHelpers_1.defaultParam(request_1.updateObject, { headers: this.authHeaders, url: this.serverUrl })(params[0]);
        });
    }
    deleteObject(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return authHelpers_1.defaultParam(request_1.deleteObject, { headers: this.authHeaders, url: this.serverUrl })(params[0]);
        });
    }
    propfind(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return authHelpers_1.defaultParam(request_1.propfind, { headers: this.authHeaders })(params[0]);
        });
    }
    createAccount(params0) {
        return __awaiter(this, void 0, void 0, function* () {
            const { account, headers, loadCollections, loadObjects } = params0;
            return account_1.createAccount({
                account: Object.assign({ serverUrl: this.serverUrl, credentials: this.credentials }, account),
                headers: Object.assign(Object.assign({}, this.authHeaders), headers),
                loadCollections,
                loadObjects,
            });
        });
    }
    collectionQuery(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return authHelpers_1.defaultParam(collection_1.collectionQuery, { headers: this.authHeaders })(params[0]);
        });
    }
    makeCollection(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return authHelpers_1.defaultParam(collection_1.makeCollection, { headers: this.authHeaders })(params[0]);
        });
    }
    syncCollection(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return authHelpers_1.defaultParam(collection_1.syncCollection, { headers: this.authHeaders })(params[0]);
        });
    }
    supportedReportSet(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return authHelpers_1.defaultParam(collection_1.supportedReportSet, { headers: this.authHeaders })(params[0]);
        });
    }
    isCollectionDirty(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return authHelpers_1.defaultParam(collection_1.isCollectionDirty, { headers: this.authHeaders })(params[0]);
        });
    }
    smartCollectionSync(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return authHelpers_1.defaultParam(collection_1.smartCollectionSync, {
                headers: this.authHeaders,
                account: this.account,
            })(params[0]);
        });
    }
    calendarQuery(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return authHelpers_1.defaultParam(calendar_1.calendarQuery, { headers: this.authHeaders })(params[0]);
        });
    }
    makeCalendar(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return authHelpers_1.defaultParam(calendar_1.makeCalendar, { headers: this.authHeaders })(params[0]);
        });
    }
    calendarMultiGet(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return authHelpers_1.defaultParam(calendar_1.calendarMultiGet, { headers: this.authHeaders })(params[0]);
        });
    }
    fetchCalendars(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return authHelpers_1.defaultParam(calendar_1.fetchCalendars, { headers: this.authHeaders, account: this.account })(params === null || params === void 0 ? void 0 : params[0]);
        });
    }
    fetchCalendarObjects(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return authHelpers_1.defaultParam(calendar_1.fetchCalendarObjects, { headers: this.authHeaders })(params[0]);
        });
    }
    createCalendarObject(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return authHelpers_1.defaultParam(calendar_1.createCalendarObject, { headers: this.authHeaders })(params[0]);
        });
    }
    updateCalendarObject(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return authHelpers_1.defaultParam(calendar_1.updateCalendarObject, { headers: this.authHeaders })(params[0]);
        });
    }
    deleteCalendarObject(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return authHelpers_1.defaultParam(calendar_1.deleteCalendarObject, { headers: this.authHeaders })(params[0]);
        });
    }
    syncCalendars(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return authHelpers_1.defaultParam(calendar_1.syncCalendars, {
                headers: this.authHeaders,
                account: this.account,
            })(params[0]);
        });
    }
    addressBookQuery(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return authHelpers_1.defaultParam(addressBook_1.addressBookQuery, { headers: this.authHeaders })(params[0]);
        });
    }
    addressBookMultiGet(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return authHelpers_1.defaultParam(addressBook_1.addressBookMultiGet, { headers: this.authHeaders })(params[0]);
        });
    }
    fetchAddressBooks(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return authHelpers_1.defaultParam(addressBook_1.fetchAddressBooks, { headers: this.authHeaders, account: this.account })(params === null || params === void 0 ? void 0 : params[0]);
        });
    }
    fetchVCards(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return authHelpers_1.defaultParam(addressBook_1.fetchVCards, { headers: this.authHeaders })(params[0]);
        });
    }
    createVCard(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return authHelpers_1.defaultParam(addressBook_1.createVCard, { headers: this.authHeaders })(params[0]);
        });
    }
    updateVCard(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return authHelpers_1.defaultParam(addressBook_1.updateVCard, { headers: this.authHeaders })(params[0]);
        });
    }
    deleteVCard(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return authHelpers_1.defaultParam(addressBook_1.deleteVCard, { headers: this.authHeaders })(params[0]);
        });
    }
}
exports.DAVClient = DAVClient;
//# sourceMappingURL=client.js.map