import { DAVDepth, DAVFilter, DAVProp, DAVResponse } from './DAVTypes';
export declare type DAVCollection = {
    objects?: DAVObject[];
    ctag?: string;
    description?: string;
    displayName?: string;
    reports?: any;
    resourcetype?: any;
    syncToken?: string;
    url: string;
    fetchObjects?: ((params?: {
        collection: DAVCalendar;
        headers?: Record<string, string>;
    }) => Promise<DAVCalendarObject[]>) | ((params?: {
        collection: DAVAddressBook;
        headers?: Record<string, string>;
    }) => Promise<DAVVCard[]>);
    objectMultiGet?: (params: {
        url: string;
        props: DAVProp[];
        objectUrls: string[];
        filters?: DAVFilter[];
        timezone?: string;
        depth: DAVDepth;
        headers?: Record<string, string>;
    }) => Promise<DAVResponse[]>;
};
export declare type DAVObject = {
    data?: any;
    etag: string;
    url: string;
};
export declare type DAVCredentials = {
    username?: string;
    password?: string;
    clientId?: string;
    clientSecret?: string;
    authorizationCode?: string;
    redirectUrl?: string;
    tokenUrl?: string;
    accessToken?: string;
    refreshToken?: string;
    expiration?: number;
};
export declare type DAVAccount = {
    accountType: 'caldav' | 'carddav';
    serverUrl: string;
    credentials?: DAVCredentials;
    rootUrl?: string;
    principalUrl?: string;
    homeUrl?: string;
    calendars?: DAVCalendar[];
    addressBooks?: DAVAddressBook[];
};
export declare type DAVVCard = DAVObject;
export declare type DAVCalendarObject = DAVObject;
export declare type DAVAddressBook = DAVCollection;
export declare type DAVCalendar = {
    components?: string[];
    timezone?: string;
} & DAVCollection;
