var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { createAccount as rawCreateAccount } from './account';
import { addressBookMultiGet as rawAddressBookMultiGet, addressBookQuery as rawAddressBookQuery, createVCard as rawCreateVCard, deleteVCard as rawDeleteVCard, fetchAddressBooks as rawFetchAddressBooks, fetchVCards as rawFetchVCards, updateVCard as rawUpdateVCard, } from './addressBook';
import { calendarMultiGet as rawCalendarMultiGet, calendarQuery as rawCalendarQuery, createCalendarObject as rawCreateCalendarObject, deleteCalendarObject as rawDeleteCalendarObject, fetchCalendarObjects as rawFetchCalendarObjects, fetchCalendars as rawFetchCalendars, makeCalendar as rawMakeCalendar, syncCalendars as rawSyncCalendars, updateCalendarObject as rawUpdateCalendarObject, } from './calendar';
import { collectionQuery as rawCollectionQuery, isCollectionDirty as rawIsCollectionDirty, makeCollection as rawMakeCollection, smartCollectionSync as rawSmartCollectionSync, supportedReportSet as rawSupportedReportSet, syncCollection as rawSyncCollection, } from './collection';
import { createObject as rawCreateObject, davRequest as rawDavRequest, deleteObject as rawDeleteObject, propfind as rawPropfind, updateObject as rawUpdateObject, } from './request';
import { defaultParam, getBasicAuthHeaders, getOauthHeaders } from './util/authHelpers';
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
export const createDAVClient = (params) => __awaiter(void 0, void 0, void 0, function* () {
    const { serverUrl, credentials, authMethod, defaultAccountType } = params;
    const authHeaders = 
    // eslint-disable-next-line no-nested-ternary
    authMethod === 'Basic'
        ? getBasicAuthHeaders(credentials)
        : authMethod === 'Oauth'
            ? (yield getOauthHeaders(credentials)).headers
            : {};
    const defaultAccount = defaultAccountType
        ? yield rawCreateAccount({
            account: { serverUrl, credentials, accountType: defaultAccountType },
            headers: authHeaders,
        })
        : undefined;
    const davRequest = (params0) => __awaiter(void 0, void 0, void 0, function* () {
        const { init } = params0, rest = __rest(params0, ["init"]);
        const { headers } = init, restInit = __rest(init, ["headers"]);
        return rawDavRequest(Object.assign(Object.assign({}, rest), { init: Object.assign(Object.assign({}, restInit), { headers: Object.assign(Object.assign({}, authHeaders), headers) }) }));
    });
    const createObject = defaultParam(rawCreateObject, {
        url: serverUrl,
        headers: authHeaders,
    });
    const updateObject = defaultParam(rawUpdateObject, { headers: authHeaders, url: serverUrl });
    const deleteObject = defaultParam(rawDeleteObject, { headers: authHeaders, url: serverUrl });
    const propfind = defaultParam(rawPropfind, { headers: authHeaders });
    // account
    const createAccount = (params0) => __awaiter(void 0, void 0, void 0, function* () {
        const { account, headers, loadCollections, loadObjects } = params0;
        return rawCreateAccount({
            account: Object.assign({ serverUrl, credentials }, account),
            headers: Object.assign(Object.assign({}, authHeaders), headers),
            loadCollections,
            loadObjects,
        });
    });
    // collection
    const collectionQuery = defaultParam(rawCollectionQuery, { headers: authHeaders });
    const makeCollection = defaultParam(rawMakeCollection, { headers: authHeaders });
    const syncCollection = defaultParam(rawSyncCollection, { headers: authHeaders });
    const supportedReportSet = defaultParam(rawSupportedReportSet, {
        headers: authHeaders,
    });
    const isCollectionDirty = defaultParam(rawIsCollectionDirty, {
        headers: authHeaders,
    });
    const smartCollectionSync = defaultParam(rawSmartCollectionSync, {
        headers: authHeaders,
        account: defaultAccount,
    });
    // calendar
    const calendarQuery = defaultParam(rawCalendarQuery, { headers: authHeaders });
    const calendarMultiGet = defaultParam(rawCalendarMultiGet, { headers: authHeaders });
    const makeCalendar = defaultParam(rawMakeCalendar, { headers: authHeaders });
    const fetchCalendars = defaultParam(rawFetchCalendars, {
        headers: authHeaders,
        account: defaultAccount,
    });
    const fetchCalendarObjects = defaultParam(rawFetchCalendarObjects, {
        headers: authHeaders,
    });
    const createCalendarObject = defaultParam(rawCreateCalendarObject, {
        headers: authHeaders,
    });
    const updateCalendarObject = defaultParam(rawUpdateCalendarObject, {
        headers: authHeaders,
    });
    const deleteCalendarObject = defaultParam(rawDeleteCalendarObject, {
        headers: authHeaders,
    });
    const syncCalendars = defaultParam(rawSyncCalendars, {
        account: defaultAccount,
        headers: authHeaders,
    });
    // addressBook
    const addressBookQuery = defaultParam(rawAddressBookQuery, { headers: authHeaders });
    const addressBookMultiGet = defaultParam(rawAddressBookMultiGet, { headers: authHeaders });
    const fetchAddressBooks = defaultParam(rawFetchAddressBooks, {
        account: defaultAccount,
        headers: authHeaders,
    });
    const fetchVCards = defaultParam(rawFetchVCards, { headers: authHeaders });
    const createVCard = defaultParam(rawCreateVCard, { headers: authHeaders });
    const updateVCard = defaultParam(rawUpdateVCard, { headers: authHeaders });
    const deleteVCard = defaultParam(rawDeleteVCard, { headers: authHeaders });
    return {
        davRequest,
        propfind,
        createAccount,
        createObject,
        updateObject,
        deleteObject,
        calendarQuery,
        addressBookQuery,
        collectionQuery,
        makeCollection,
        calendarMultiGet,
        makeCalendar,
        syncCollection,
        supportedReportSet,
        isCollectionDirty,
        smartCollectionSync,
        fetchCalendars,
        fetchCalendarObjects,
        createCalendarObject,
        updateCalendarObject,
        deleteCalendarObject,
        syncCalendars,
        fetchAddressBooks,
        addressBookMultiGet,
        fetchVCards,
        createVCard,
        updateVCard,
        deleteVCard,
    };
});
export class DAVClient {
    constructor(params) {
        var _a, _b;
        this.serverUrl = params.serverUrl;
        this.credentials = params.credentials;
        this.authMethod = (_a = params.authMethod) !== null && _a !== void 0 ? _a : 'Basic';
        this.accountType = (_b = params.defaultAccountType) !== null && _b !== void 0 ? _b : 'caldav';
    }
    login() {
        return __awaiter(this, void 0, void 0, function* () {
            this.authHeaders =
                // eslint-disable-next-line no-nested-ternary
                this.authMethod === 'Basic'
                    ? getBasicAuthHeaders(this.credentials)
                    : this.authMethod === 'Oauth'
                        ? (yield getOauthHeaders(this.credentials)).headers
                        : {};
            this.account = this.accountType
                ? yield rawCreateAccount({
                    account: {
                        serverUrl: this.serverUrl,
                        credentials: this.credentials,
                        accountType: this.accountType,
                    },
                    headers: this.authHeaders,
                })
                : undefined;
        });
    }
    davRequest(params0) {
        return __awaiter(this, void 0, void 0, function* () {
            const { init } = params0, rest = __rest(params0, ["init"]);
            const { headers } = init, restInit = __rest(init, ["headers"]);
            return rawDavRequest(Object.assign(Object.assign({}, rest), { init: Object.assign(Object.assign({}, restInit), { headers: Object.assign(Object.assign({}, this.authHeaders), headers) }) }));
        });
    }
    createObject(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return defaultParam(rawCreateObject, {
                url: this.serverUrl,
                headers: this.authHeaders,
            })(params[0]);
        });
    }
    updateObject(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return defaultParam(rawUpdateObject, { headers: this.authHeaders, url: this.serverUrl })(params[0]);
        });
    }
    deleteObject(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return defaultParam(rawDeleteObject, { headers: this.authHeaders, url: this.serverUrl })(params[0]);
        });
    }
    propfind(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return defaultParam(rawPropfind, { headers: this.authHeaders })(params[0]);
        });
    }
    createAccount(params0) {
        return __awaiter(this, void 0, void 0, function* () {
            const { account, headers, loadCollections, loadObjects } = params0;
            return rawCreateAccount({
                account: Object.assign({ serverUrl: this.serverUrl, credentials: this.credentials }, account),
                headers: Object.assign(Object.assign({}, this.authHeaders), headers),
                loadCollections,
                loadObjects,
            });
        });
    }
    collectionQuery(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return defaultParam(rawCollectionQuery, { headers: this.authHeaders })(params[0]);
        });
    }
    makeCollection(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return defaultParam(rawMakeCollection, { headers: this.authHeaders })(params[0]);
        });
    }
    syncCollection(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return defaultParam(rawSyncCollection, { headers: this.authHeaders })(params[0]);
        });
    }
    supportedReportSet(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return defaultParam(rawSupportedReportSet, { headers: this.authHeaders })(params[0]);
        });
    }
    isCollectionDirty(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return defaultParam(rawIsCollectionDirty, { headers: this.authHeaders })(params[0]);
        });
    }
    smartCollectionSync(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return defaultParam(rawSmartCollectionSync, {
                headers: this.authHeaders,
                account: this.account,
            })(params[0]);
        });
    }
    calendarQuery(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return defaultParam(rawCalendarQuery, { headers: this.authHeaders })(params[0]);
        });
    }
    makeCalendar(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return defaultParam(rawMakeCalendar, { headers: this.authHeaders })(params[0]);
        });
    }
    calendarMultiGet(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return defaultParam(rawCalendarMultiGet, { headers: this.authHeaders })(params[0]);
        });
    }
    fetchCalendars(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return defaultParam(rawFetchCalendars, { headers: this.authHeaders, account: this.account })(params === null || params === void 0 ? void 0 : params[0]);
        });
    }
    fetchCalendarObjects(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return defaultParam(rawFetchCalendarObjects, { headers: this.authHeaders })(params[0]);
        });
    }
    createCalendarObject(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return defaultParam(rawCreateCalendarObject, { headers: this.authHeaders })(params[0]);
        });
    }
    updateCalendarObject(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return defaultParam(rawUpdateCalendarObject, { headers: this.authHeaders })(params[0]);
        });
    }
    deleteCalendarObject(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return defaultParam(rawDeleteCalendarObject, { headers: this.authHeaders })(params[0]);
        });
    }
    syncCalendars(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return defaultParam(rawSyncCalendars, {
                headers: this.authHeaders,
                account: this.account,
            })(params[0]);
        });
    }
    addressBookQuery(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return defaultParam(rawAddressBookQuery, { headers: this.authHeaders })(params[0]);
        });
    }
    addressBookMultiGet(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return defaultParam(rawAddressBookMultiGet, { headers: this.authHeaders })(params[0]);
        });
    }
    fetchAddressBooks(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return defaultParam(rawFetchAddressBooks, { headers: this.authHeaders, account: this.account })(params === null || params === void 0 ? void 0 : params[0]);
        });
    }
    fetchVCards(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return defaultParam(rawFetchVCards, { headers: this.authHeaders })(params[0]);
        });
    }
    createVCard(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return defaultParam(rawCreateVCard, { headers: this.authHeaders })(params[0]);
        });
    }
    updateVCard(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return defaultParam(rawUpdateVCard, { headers: this.authHeaders })(params[0]);
        });
    }
    deleteVCard(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return defaultParam(rawDeleteVCard, { headers: this.authHeaders })(params[0]);
        });
    }
}
//# sourceMappingURL=client.js.map